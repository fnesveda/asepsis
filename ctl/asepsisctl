#!/usr/bin/env ruby

ASEPSISCTL_VERSION = "##VERSION##"
begin
    BASE_DIR = File.expand_path(File.dirname(File.readlink(__FILE__))) # asepsisctl may be a symlink, resolve to a real location
rescue
    BASE_DIR = File.expand_path(File.dirname(__FILE__)) # for local debugging
end

require BASE_DIR + '/lib/micro-optparse'
require BASE_DIR + '/lib/helpers'

##############################################################################################################################

RESOURCES_PATH = File.expand_path(File.join(BASE_DIR, ".."))
DISABLE_FILE_PATH = "/var/db/.asepsis.disabled"
PREFIX_PATH = "/usr/local/.dscage"
ASEPSISD_PATH = File.join(RESOURCES_PATH, "asepsisd")
DAEMON_PLIST_PATH = "/Library/LaunchDaemons/com.binaryage.asepsis.daemon.plist"
DAEMON_PLIST_SOURCE_PATH = File.join(RESOURCES_PATH, "com.binaryage.asepsis.daemon.plist")
ASEPSISCTL_SYMLINK_PATH = "/usr/local/bin/asepsisctl"
ASEPSISCTL_SYMLINK_SOURCE_PATH = File.join(RESOURCES_PATH, "ctl", "asepsisctl")
DAEMON_LABEL = "com.binaryage.asepsis.daemon"
DS_FRAMEWORK_PATH = "/System/Library/PrivateFrameworks/DesktopServicesPriv.framework"
DS_LIB_ASEPSIS_REV = File.join(DS_FRAMEWORK_PATH, "Versions", "asepsis-1.4")
DS_LIB_FOLDER = File.join(DS_FRAMEWORK_PATH, "Versions", "A")
DS_LIB_RELOCATED_FOLDER = File.join(DS_FRAMEWORK_PATH, "Versions", "A_")
DS_LIB_BACKUP_FOLDER = File.join(DS_FRAMEWORK_PATH, "Versions", "A_Backup")
DS_LIB_PANIC_BACKUP_FOLDER = File.join(DS_FRAMEWORK_PATH, "Versions", "A_Backup_Panic")
DS_WRAPPER_SOURCE_PATH = File.join(RESOURCES_PATH, "DesktopServicesPrivWrapper")
CODESIGN_PATH = "/usr/bin/codesign"

##############################################################################################################################

options = Parser.new do |p|
    p.banner =  <<-EOS
The control script for asepsis operations.

Usage:
    asepsisctl [command] [options]

Commands:
    disable                          Disables asepsis.
    enable                           Enables asepsis.
    diagnose                         Diagnoses asepsis setup.

Helper commands:
    neton                            Enables DS_Store files on network volumes.
    netoff                           Disables ... (http://support.apple.com/kb/ht1629).
    migratein [root]                 Migrates .DS_Store files located within [root] into -> #{PREFIX_PATH}. (Cleanup)
    migrateout [root]                Migrates .DS_Store files originally within [root] back from <- #{PREFIX_PATH}. (Restore)
    prune                            Removes empty directories from #{PREFIX_PATH}.
    reset                            Deletes all content from #{PREFIX_PATH}.

Installation commands:
    install                          Performs reinstallation (using "#{RESOURCES_PATH}").
    uninstall                        Performs complete uninstallation.
    install_wrapper                  Installs DesktopServicesPriv.framework wrapper.
    uninstall_wrapper                Uninstalls DesktopServicesPriv.framework wrapper.
    remove_symlink                   Removes asepsisctl symlink from /usr/local/bin.
    create_symlink                   Creates asepsisctl symlink in /usr/local/bin.
    make_dscage                      Makes sure #{PREFIX_PATH} exists with sufficient rights.
    kill_daemon                      Stops asepsis daemon.
    uninstall_daemon                 Uninstalls asepsis daemon.
    install_daemon                   Installs asepsis daemon.
    launch_daemon                    Launches asepsis daemon.
    enable_warnings                  Enables warnings caused by mach_override (vm.shared_region_unnest_logging)
    disable_warnings                 Disables warnings caused by mach_override (vm.shared_region_unnest_logging)

Where options are:
EOS
    p.version = "asepsisctl #{ASEPSISCTL_VERSION}"
    p.option :root, "Root folder for migration", :default => unless (ENV["HOME"]||"").empty? then File.expand_path("~") else "/" end
    p.option :dry, "Run migration in dry mode", :default => false
    p.option :verbose, "Be more verbose", :default => false
    p.option :force, "Force operation", :default => false
    p.option :nosudo, "Don't apply sudo", :default => false
    p.option :panic, "Panic mode", :default => false
end.process!

##############################################################################################################################

require BASE_DIR + '/cmd/disable'
require BASE_DIR + '/cmd/enable'
require BASE_DIR + '/cmd/neton'
require BASE_DIR + '/cmd/netoff'
require BASE_DIR + '/cmd/diagnose'
require BASE_DIR + '/cmd/migratein'
require BASE_DIR + '/cmd/migrateout'
require BASE_DIR + '/cmd/prune'
require BASE_DIR + '/cmd/clean'
require BASE_DIR + '/cmd/reset'
require BASE_DIR + '/cmd/install'
require BASE_DIR + '/cmd/uninstall'
require BASE_DIR + '/cmd/install_wrapper'
require BASE_DIR + '/cmd/uninstall_wrapper'
require BASE_DIR + '/cmd/remove_symlink'
require BASE_DIR + '/cmd/create_symlink'
require BASE_DIR + '/cmd/make_dscage'
require BASE_DIR + '/cmd/kill_daemon'
require BASE_DIR + '/cmd/uninstall_daemon'
require BASE_DIR + '/cmd/install_daemon'
require BASE_DIR + '/cmd/launch_daemon'
require BASE_DIR + '/cmd/enable_warnings'
require BASE_DIR + '/cmd/disable_warnings'

##############################################################################################################################

command = ARGV[0]

die("unknown command, usage: asepsisctl --help") unless Object.respond_to?("cmd_#{command}", true)

eval("cmd_#{command}(options)") # dispatch the command